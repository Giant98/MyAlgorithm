/*
题目描述：LeetCode 65

有效数字（按顺序）可以分成以下几个部分：

一个 小数 或者 整数
（可选）一个 'e' 或 'E' ，后面跟着一个 整数
小数（按顺序）可以分成以下几个部分：

（可选）一个符号字符（'+' 或 '-'）
下述格式之一：
至少一位数字，后面跟着一个点 '.'
至少一位数字，后面跟着一个点 '.' ，后面再跟着至少一位数字
一个点 '.' ，后面跟着至少一位数字
整数（按顺序）可以分成以下几个部分：

（可选）一个符号字符（'+' 或 '-'）
至少一位数字
部分有效数字列举如下：

["2", "0089", "-0.1", "+3.14", "4.", "-.9", "2e10", "-90E3", "3e+7", "+6e-1", "53.5e93", "-123.456e789"]
部分无效数字列举如下：

["abc", "1a", "1e", "e3", "99e2.5", "--6", "-+3", "95a54e53"]
给你一个字符串 s ，如果 s 是一个 有效数字 ，请返回 true 。

输入：s = "0"
输出：true
*/
class Solution {
public:
    bool isNumber(string s) {
        bool sign = 0;
        bool num = 0;
        bool dec = 0;
        int point = 0;
        int exp = 0;

        int n = s.size();
        for (int i = 0; i < n; ++i) {
            if (s[i] == '+' || s[i] == '-') {
                //不能出现两个符号
                if (sign) {
                    return false;
                }
                //如果符号位在最开始或者紧跟e后，是有效的符号位
                if (i == 0 || s[i - 1] == 'E' || s[i - 1] == 'e') {
                    sign = 1;
                }
                //符号不能出现在其他位置
                else {
                    return false;
                }
            }
            else if (s[i] == '.') {
                //点不能在e之后，并且只能存在一个点
                if (exp || point) {
                    return false;
                }
                point = 1;
            }
            else if (s[i] == 'e' || s[i] == 'E') {
                //如果存在一个e或者e前的数不是一个有效的整数或者小数时，错误
                if (exp || (num == 0 && dec == 0)) {
                    return false;
                }
                //否则就是有效的e，允许后面出现符号和整数
                //因此重置符号位，整数位，小数位状态，将e的标识符写为1
                else {
                    sign = 0;
                    num = 0;
                    dec = 0;
                    exp = 1;
                }
            }
            else if (s[i] >= '0' && s[i] <= '9') {
                //如果整数位为空或者进入指数状态，要填入整数位
                if (num == 0 || exp == 1) {
                    num = 1;
                }
                //否则就是小数位，小数位有效
                else if (point) {
                    dec = 1;
                }
            }
            else {
                //其他字符直接返回
                return false;
            }
        }
        //返回是否构成了有效的整数或者小数
        return num || dec;
    }
};
